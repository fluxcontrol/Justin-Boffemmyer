#!/bin/bash
#-------------------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
##  liberror is a set of functions and variable definitions used
##  internally by cauldron for error handling and error definitions
##
##=head1 COPYRIGHT
##
##  Copyright 2009 by the Cauldron Team
##
##=head1 FUNCTIONS
##
##=over 4
##
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Output Stream Definitions
#-------------------------------------------------------------------------------
LIBERR_STDOUT=${LIBERR_STDOUT:-1}
LIBERR_STDERR=${LIBERR_STDERR:-2}

#-------------------------------------------------------------------------------
# ERROR definitions
#-------------------------------------------------------------------------------
# error codes
ERR_OK=0                  # everything is good
ERR_FATAL=1               # fatal error (missing cauldron libs, etc.)

# error messages
ERR_MSGS=(
          "operation succeeded"                 # ERR_OK
          "fatal error"                         # ERR_FATAL
          )

#-------------------------------------------------------------------------------
# Function definitions
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
## @param error name (required)
## @param error message (required)
##
## Defines the given error code with corresponding name and message.
## Automatically assigns the next available number to the error code.
## Usage example:
##   liberror_add_error ERR_EXAMPLE "example error message"
##
#-------------------------------------------------------------------------------
function liberror_add_error() {
  local code="$1"
  local msg="$2"
  local count="${#ERR_MSGS[@]}"

  [[ -z "$code" || -z "$msg" ]] && return $ERR_FATAL

  [[ "$count" -ge 255 ]] && return $ERR_FATAL

  # define the error code itself
  eval "$code"=$count

  # define a corresponding message in the message array
  ERR_MSGS[$count]="$msg"

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param error number
## @param error information (optional)
##
## Prints the corresponding error message for the given error type (number,
## defined as a variable in an errorcodes file, e.g. $ERR_FATAL) to
## LIBERR_STDOUT. If the optional error information is provided as the second
## parameter, then it will be appended to the error message before being output.
##
## If libcolor is sourced and color is not specifically disabled, then the error
## message will be output in the configured error message color.
##
#-------------------------------------------------------------------------------
function liberror_print_error() {
  local error="$1"
  local info="$2"
  local errmsg="${ERR_MSGS[${error}]}"
  local output="$LIBERR_STDOUT"

  # exit if $errmsg not defined
  [[ -z "$errmsg" ]] && return 1

  # get the name of the calling function
  local caller=""
  local lineno=""
  local bashsrc=""
  for ((i=0; i < "${#FUNCNAME[@]}"; i++))
  do
    if [[ "${FUNCNAME[i]}" != liberror* ]]
    then
      caller="${FUNCNAME[i]}"
      lineno="${BASH_LINENO[i-1]}"
      bashsrc="${BASH_SOURCE[i]}"
      break
    fi
  done

  # inject the calling function's name and source line number
  # into the error message for tracing purposes
  errmsg="$caller\(${bashsrc##*/}:$lineno\): $errmsg"

  # print an OK message if the "error" is 0, otherwise print an error message
  if [[ "$error" -eq 0 ]]
  then
    # output using libcolor if available
    if declare -lF libcolor_notice
    then
      eval libcolor_notice "$errmsg" >&$output
      echo "" >&$output
    else
      eval echo "$errmsg" >&$output
    fi
  else
    # tack on the error info to the errmsg if defined
    [[ -n "$info" ]] && errmsg="$errmsg: $info"

    # output using libcolor if available
    if declare -lF libcolor_error
    then
      eval libcolor_error "$errmsg" >&$output
      echo "" >&$output
    else
      eval echo "$errmsg" >&$output
    fi
  fi || return 1

  return 0
}

#-------------------------------------------------------------------------------
## @param error number
## @param error information (optional)
##
## Calls liberror_print_error with the error number passed as the first
## argument, and optionally error information as the second argument, then exits
## with the same error number. If no error number was passed in then the
## function returns with error rather than exiting.
##
#-------------------------------------------------------------------------------
function liberror_die() {
  local error="$1"
  local info="$2"
  local LIBERR_STDOUT="$LIBERR_STDERR"

  # exit if $errmsg not defined
  [[ -z "$error" ]] && return 1

  # print the corresponding error message on STDERR
  liberror_print_error "$error" "$info"

  # die is used for fatal errors, so exit to the parent process rather than
  # returning to the caller
  exit "$error"
}

#-------------------------------------------------------------------------------
## @param error name (optional)
## @param error information (optional)
##
## Calls liberror_print_error if current exit status (from a previous command)
## holds an error that is defined. If error name is provided as the first
## argument, then it will override the value of $? and use the provided error
## name instead. If error information is provided as an argument, then it will
## be added to the defined error message as additional information.
##
## Note that, while both parameters are optional, the error name must be the
## first argument, but error information is allowed to be the only argument.
## Thus, if you wish to override the error name but not provide additional error
## information, the error name should be given as the first argument and an
## empty string given as the error information. An example follows.
##
##   liberror_check ERR_NAME ""
##
#-------------------------------------------------------------------------------
function liberror_check() {
  local error="$?"
  local info=""

  # return "OK" immediately if the error code matches ERR_OK
  [[ "$error" -eq "$ERR_OK" ]] && return 0

  # if we were given two parameters, the first is the error name (override), and
  # the second is the info message. Otherwise, the first parameter (if given) is
  # the info message, and error is taken from the $? resulting from whatever
  # command/function was run before calling the present function.
  if [[ "$#" -eq 2 ]]
  then
    error="$1"
    info="$2"
  else
    info="$1"
  fi

  liberror_print_error "$error" "$info"

  # return the same error back so that we don't modify the return value
  # environment
  return $error
}

#-------------------------------------------------------------------------------
## @param error name (optional)
## @param error information (optional)
##
## Calls liberror_die if current exit status (from a previous command) holds an
## error that is defined. If error name is provided as the first argument, then
## it will override the value of $? and use the provided error name instead. If
## error information is provided as an argument, then it will be added to the
## defined error message as additional information.
##
## Note that, while both parameters are optional, the error name must be the
## first argument, but error information is allowed to be the only argument.
## Thus, if you wish to override the error name but not provide additional error
## information, the error name should be given as the first argument and an
## empty string given as the error information. An example follows.
##
##   liberror_check_fatal ERR_NAME ""
##
#-------------------------------------------------------------------------------
function liberror_check_fatal() {
  local error="$?"
  local info=""

  # return "OK" immediately if the error code matches ERR_OK
  [[ "$error" -eq "$ERR_OK" ]] && return 0

  # if we were given two parameters, the first is the error name (override), and
  # the second is the info message. Otherwise, the first parameter (if given) is
  # the info message, and error is taken from the $? resulting from whatever
  # command/function was run before calling the present function.
  if [[ "$#" -eq 2 ]]
  then
    error="$1"
    info="$2"
  else
    info="$1"
  fi

  liberror_die "$error" "$info"

  # liberror_die calls exit so we should never reach the following return
  # statement
  # in the event that we do reach it, we don't want to cycle errors endlessly,
  # so return "OK"
  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#-------------------------------------------------------------------------------

# vim:ai:tw=80:tabstop=2:softtabstop=2:shiftwidth=2:expandtab
