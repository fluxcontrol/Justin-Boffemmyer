#!/bin/bash
#-------------------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
##  libinit is a set of functions used internally by the cauldron scripts
##  responsible for handling the init setup, including initrd and initramfs, on
##  the ISOs.
##
##=head1 COPYRIGHT
##
##  Copyright 2009 by the Cauldron Team
##
##=head1 FUNCTIONS
##
##=over 4
##
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
## @param init ramdisk/ramfs image (required)
##
## Copies the image passed as first parameter into the ISO run-time filesystem
## for use during the ISO boot process.
##
#-------------------------------------------------------------------------------
function cauldron_init_img_install() {
  local img="$1"

  "${CAULDRON_CMD_MKDIR[@]}" "$CAULDRON_ISO/boot" || return $ERR_MK_DIR

  "${CAULDRON_CMD_CP[@]}" "$img" "$CAULDRON_ISO/boot/$img" ||
    return $ERR_CP_FILE

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Makes the initrd to be used by the ISO on booting.
##
#-------------------------------------------------------------------------------
function cauldron_init_ramdisk_make() {
  local initrd="$CAULDRON_TMP/initrd"
  local initmnt="$CAULDRON_TMP/initrd_mount"

  "${CAULDRON_CMD_MKDIR[@]}" "$initmnt" || return $ERR_MK_DIR

  "${CAULDRON_CMD_DD[@]}" \
    '-if' /dev/null \
    '-of' "$initrd" ||
      return $ERR_INIT_MAKE_RD

  "${CAULDRON_CMD_MKRDFS[@]}" "$initrd" || return $ERR_INIT_MAKE_RD

  "${CAULDRON_CMD_MOUNT_LOOP[@]}" \
    "$initrd" \
    "$initmnt" ||
      return $ERR_INIT_MAKE_RD

  cauldron_init_fs_make "$initmnt" || return $ERR_INIT_MAKE_RD

  "${CAULDRON_CMD_UNMOUNT[@]}" "$initmnt" || return $ERR_INIT_MAKE_RD

  "${CAULDRON_CMD_COMPRESS_RAMDISK[@]}" "$initrd" || return $ERR_INIT_MAKE_RD

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Installs the init ramdisk to be used by the ISO on booting.
##
#-------------------------------------------------------------------------------
function cauldron_init_ramdisk_install() {
  local ramdisk="$CAULDRON_TMP/initrd.gz"

  cauldron_init_img_install "$ramdisk" || return $ERR_INIT_INSTALL_RD

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Makes the initramfs be used by the ISO on booting.
##
#-------------------------------------------------------------------------------
function cauldron_init_ramfs_make() {
  local ramdir="$CAULDRON_TMP/initfs"
  local ramfs="$CAULDRON_TMP/initfs.gz"

  "${CAULDRON_CMD_MKDIR[@]}" "$ramdir" || return $ERR_MK_DIR

  cauldron_init_fs_make "$ramdir"
  liberror_check || return $ERR_INIT_MAKE_FS

  (
    cd "$ramdir"
    "${CAULDRON_CMD_MKRAMFS[@]}" > "$ramfs"
  ) ||
    return $ERR_INIT_MAKE_RAMFS

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Installs the init ramfs to be used by the ISO on booting.
##
#-------------------------------------------------------------------------------
function cauldron_init_ramfs_install() {
  local ramfs="$CAULDRON_TMP/initfs.gz"

  cauldron_init_img_install "$ramfs"
  liberror_check || return $ERR_INIT_INSTALL_RAMFS

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param path_to_initfs (required)
## @param list of directories (optional)
##
## Sets up the basic directories that will be needed on the initfs. If the list
## of directories aren't passed in as function parameters, the list defaults to
## that found in the config file CAULDRON_CONFIG/CAULDRON_ARCH/initfs/dirs.
##
#-------------------------------------------------------------------------------
function cauldron_init_fs_dirs() {
  local initfs="$1"
  local file="$CAULDRON_CONFIG/$CAULDRON_ARCH/initfs/dirs"
  local list=

  [[ -d "$initfs" ]] || return $ERR_TARGET
  shift

  if [[ $# -ge 1 ]]
  then
    list=( "$@" )
  else
    [[ -f "$file" ]] && list=( $(< "$file") )
  fi
  [[ -n "$list" ]] || return $ERR_INIT_DIRS


  for dir in "${list[@]}"
  do
    "${CAULDRON_CMD_MKDIR[@]}" "$initfs/$dir" ||
      return $ERR_MK_DIR
  done

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param path_to_initfs (required)
## @param list of binaries (optional)
##
## Gathers and copies the necessary binaries into the initfs. If the list of
## binaries aren't passed in as function parameters, the list defaults to that
## found in the config file CAULDRON_CONFIG/CAULDRON_ARCH/initfs/binaries.
##
#-------------------------------------------------------------------------------
function cauldron_init_fs_bins() {
  local initfs="$1"
  local file="$CAULDRON_CONFIG/$CAULDRON_ARCH/initfs/binaries"
  local list=

  [[ -d "$initfs" ]] || return $ERR_TARGET
  shift

  if [[ $# -ge 1 ]]
  then
    list=( "$@" )
  else
    [[ -f "$file" ]] && list=( $(< "$file") )
  fi

  for bin in "${list[@]}"
  do
    "${CAULDRON_CMD_CP[@]}" "$CAULDRON_BUILD/$bin" "$initfs/bin/" ||
      return $ERR_CP_FILE
    "${CAULDRON_CMD_CHMOD[@]}" 0755 "$initfs/bin/$bin" ||
      return $ERR_CHMOD_FILE
  done

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param path_to_initfs (required)
## @param list of libraries (optional)
##
## Gathers and copies the necessary libraries into the initfs. If the list of
## libraries aren't passed in as function parameters, the list defaults to that
## found in the config file CAULDRON_CONFIG/CAULDRON_ARCH/initfs/libs.
##
#-------------------------------------------------------------------------------
function cauldron_init_fs_libs() {
  local initfs="$1"
  local file="$CAULDRON_CONFIG/$CAULDRON_ARCH/initfs/libs"
  local list=

  [[ -d "$initfs" ]] || return $ERR_TARGET
  shift

  if [[ $# -ge 1 ]]
  then
    list=( "$@" )
  else
    [[ -f "$file" ]] && list=( $(< "$file") )
  fi

  for lib in "${list[@]}"
  do
    "${CAULDRON_CMD_CP[@]}" "$CAULDRON_BUILD/$lib" "$initfs/lib/" ||
      return $ERR_CP_FILE
    "${CAULDRON_CMD_CHMOD[@]}" 0644 "$initfs/lib/$lib" ||
      return $ERR_CHMOD_FILE
  done

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param path_to_initfs (required)
## @param list of libraries (optional)
##
## Copies over any required kernel modules into the initfs. If the list of
## modules aren't passed in as function parameters, the list defaults to that
## found in the config file CAULDRON_CONFIG/CAULDRON_ARCH/initfs/modules.
##
#-------------------------------------------------------------------------------
function cauldron_init_fs_mods() {
  local initfs="$1"
  local iso="$CAULDRON_ISO"
  local file="$CAULDRON_CONFIG/$CAULDRON_ARCH/initfs/modules"
  local modpath="lib/modules/$CAULDRON_KERNEL_VERS"
  local list=

  # alter the target if a compressed fs is desired
  [[ "$CAULDRON_ISO_SQUASH" == "yes" ]] &&
    iso="$CAULDRON_ISO_SQUASHFS"

  [[ -d "$initfs" ]] || return $ERR_TARGET
  [[ -d "$iso" ]] || return $ERR_DIR_ACCESS
  shift

  if [[ $# -ge 1 ]]
  then
    list=( "$@" )
  else
    [[ -f "$file" ]] && list=( $(< "$file") )
  fi

  # adding extra modules to the initfs is optional, so make sure the user wants
  # to add something
  if [[ -n "$list" ]]
  then
    # make sure the module path exists in the initfs
    "${CAULDRON_CMD_MKDIR[@]}" "$initfs/$modpath"

    cauldron_verbose "Copying kernel modules to initfs..."

    # copy all desired modules
    for module in "${list[@]}"
    do
      path="$initfs/$modpath/kernel/${module%/*}"

      "${CAULDRON_CMD_MKDIR[@]}" "$path"

      "${CAULDRON_CMD_CP_RECURSE[@]}" \
        "$iso/$modpath/kernel/$module" \
        "$path/" ||
          return $ERR_CP_FILE
    done

    cauldron_verbose "Copying kernel modules.dep and related files"\
        "to initfs..."

    # copy modules.dep, modules.alias, etc. from the source modules dir
    # files only (no hierarchies)
    for file in "$iso/$modpath/"*
    do
      if [[ -f "$file" ]]
      then
        "${CAULDRON_CMD_MKDIR[@]}" "$initfs/$modpath" ||
          return $ERR_MK_DIR
        "${CAULDRON_CMD_CP[@]}" "$file" "$initfs/$modpath/" ||
          return $ERR_CP_FILE
      fi
    done
  fi

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param path_to_initfs (required)
## @param init script (optional)
##
## Sets up the "init" in the initfs (AKA linuxrc in ramdisks)
##
#-------------------------------------------------------------------------------
function cauldron_init_fs_init() {
  local initfs="$1"
  local init_script="${2:-$CAULDRON_CONFIG/$CAULDRON_ARCH/initfs/init}"
  local isoid="/etc/enchantment/enchantment.conf"
  local isofs=""

  [[ -d "$initfs" ]] || return $ERR_TARGET
  shift

  [[ -r "$init_script" ]] || return $ERR_FILE_ACCESS

  # copy the init script to /init in the init filesystem, because /init is
  # *requried* by init ramfs and an init ramdisk can be configured to use
  # anything we want via the init= boot parameter, and we can also symlink for
  # ramdisks if we want to.
  "${CAULDRON_CMD_CP[@]}" "$init_script" "$initfs/init" || return $ERR_CP_FILE

  # make sure the init script is executable
  "${CAULDRON_CMD_CHMOD}" 0755 "$initfs/init" || return $ERR_CHMOD_FILE

  # modify the SMGL_ISOFS and SMGL_ID to match defined variables
  "${CAULDRON_CMD_SEDFILE[@]}" \
    "s,^SMGL_ID=.*,SMGL_ID=\"$isoid\"," \
    "$initfs/init" ||
      return $ERR_WRITE_FILE

  [[ "$CAULDRON_ISO_SQUASH" == "yes" ]] &&
    isofs="${CAULDRON_ISO_SQUASHIMG##*/}"

  "${CAULDRON_CMD_SEDFILE[@]}" \
    "s,^SMGL_ISOFS=.*,SMGL_ISOFS=\"$isofs\"," \
    "$initfs/init" ||
      return $ERR_WRITE_FILE

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param path_to_initfs (required)
## @param path to build directory (optional)
##
## Builds sysutils (e.g. busybox) for use in the initramfs using a preconfigured
## config file for the build. It builds by casting in the build chroot, copies
## the resulting sysutils binary, and then dispels in the chroot to clean up.
##
#-------------------------------------------------------------------------------
function cauldron_init_fs_sysutils() {
  local initfs="$1"
  local build="${2:-$CAULDRON_BUILD}"
  local util="$CAULDRON_SYSUTILS"
  local utilconf="$CAULDRON_SYSUTILS_CONF"
  local sorcery="etc/sorcery/local"

  [[ -d "$initfs" ]] || return $ERR_TARGET
  shift

  if [[ ! -d "$build" ]]
  then
    mkdir -p "$build" || return $ERR_MK_DIR
  fi

  "${CAULDRON_CMD_MKDIR[@]}" "$build/$sorcery" || return $ERR_MK_DIR

  "${CAULDRON_CMD_CP_FORCE[@]}" \
    "$utilconf" \
    "$build/$sorcery/${util}.config" ||
      return $ERR_CP_FILE

  cauldron_chroot_init "$build"
  liberror_check || return $?

  cauldron_chroot_cast "$util"
  liberror_check || return $?

  "${CAULDRON_CMD_CP[@]}" "$build/sbin/$util" "$initfs/sbin/$util" ||
    return $ERR_CP_FILE

  "${CAULDRON_CMD_SYMLINK_FORCE[@]}" "/sbin/$util" "$initfs/bin/sh" ||
    return $ERR_LINK_FILE

  cauldron_chroot_dispel "$util"
  liberror_check || return $?

  cauldron_chroot_done "$build"
  liberror_check || return $?

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param path_to_initfs (required)
##
## Higher-level function that builds a "filesystem" to be used in an initrd or
## initramfs by calling the appropriate low-level functions in turn.
##
#-------------------------------------------------------------------------------
function cauldron_init_fs_make() {
  local initfs="$1"

  [[ -d "$initfs" ]] || return $ERR_DIR_ACCESS

  cauldron_init_fs_dirs "$initfs"
  liberror_check || return $ERR_INIT_MAKE_FS
  cauldron_init_fs_sysutils "$initfs"
  liberror_check || return $ERR_INIT_MAKE_FS
  cauldron_init_fs_bins "$initfs"
  liberror_check || return $ERR_INIT_MAKE_FS
  cauldron_init_fs_libs "$initfs"
  liberror_check || return $ERR_INIT_MAKE_FS
  cauldron_init_fs_mods "$initfs"
  liberror_check || return $ERR_INIT_MAKE_FS
  cauldron_init_fs_init "$initfs"
  liberror_check || return $ERR_INIT_MAKE_FS


  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#-------------------------------------------------------------------------------

# vim:ai:tw=80:tabstop=2:softtabstop=2:shiftwidth=2:expandtab
