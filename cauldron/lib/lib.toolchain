#!/bin/bash
#-------------------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
##  lib.toolchain provides functions for generating spell caches from what's
##                available on the HOST system - only to be used for the initial
##                build toolchain
##
##=head1 COPYRIGHT
##
##  Copyright 2009 by the Cauldron Team
##
##=head1 FUNCTIONS
##
##=over 4
##
#-------------------------------------------------------------------------------

# guarantee that CAULDRON_NULL is defined
: "${CAULDRON_NULL:=/dev/null}"

# set LC_COLLATE to C so we don't get affected by the user's locale
# when grepping, sorting, etc.
export LC_COLLATE="C"

#-------------------------------------------------------------------------------
## @param chroot path (required)
## @param compiler (optional)
##
## Performs a very basic compiler test by creating a C source file that simply
## exits with 0 (success), attempts to compile it, then runs the output if the
## compile was successful. A final test for the exit status of the program
## determins if the compiler can create (at least trivial) programs that
## actually run correctly in the build environment.
##
## The chroot path parameter is the path to the chroot build environment, and
## defaults to "$CAULDRON_BUILD" if not provided. The optional compiler
## second parameter is the compiler to use (defaults to gcc). Currently the
## compiler is expected to have the same parameters as gcc (though only the
## ouput flag [-o] is used).
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_compiler_test() {
  local chroot="${1:-$CAULDRON_BUILD}"
  local compiler="${2:-$CAULDRON_COMPILER}"
  local comptest="tmp/compiler.test"


  # create an extremely simple C source for testing the compiler
  echo -e "#include <stdlib.h>\nint main(void) { exit(0); }" \
    > "$chroot/$comptest.c" ||
      return $ERR_WRITE_FILE

  cauldron_chroot_init "$chroot"
  liberror_check || return $?

  # compile a very simple source file to ensure the compiler works
  cauldron_chroot "$compiler" -o "/$comptest" "/$comptest.c"
  liberror_check "compile $comptest.c using $compiler" || return $?

  # run the generated binary to make sure it was properly compiled
  cauldron_chroot "/$comptest"
  liberror_check "execute $chroot/$comptest" || return $?

  cauldron_chroot_done "$chroot"
  liberror_check || return $?

  # clean up the temporary files
  "${CAULDRON_CMD_RM_FORCE[@]}" "$chroot/$comptest.c" "$chroot/$comptest" ||
    return $ERR_RM_FILE

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param baseroot_dir (optional)
##
## Performs basic quality assurance over an acquired basesystem chroot for
## cauldron purposes. The path to the (unpacked) baseroot_dir directory (which
## will function as the build chroot hereafter) defaults to "$CAULDRON_BUILD" if
## not provided.
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_baseroot_test() {
  local chroot="${1:-$CAULDRON_BUILD}"

  # ensure that a valid chroot was passed in as the first parameter
  [[ -d "$chroot" ]] || return $ERR_TOOLCHAIN_BASEROOT_TEST

  # ensure important standard directories are present
  for dir in "${CAULDRON_FHS_DIRS[@]}"
  do
    if [[ ! -d "$chroot/$dir" ]]
    then
      "${CAULDRON_CMD_MKDIR[@]}" "$chroot/$dir" ||
        return $ERR_TOOLCHAIN_BASEROOT_TEST
    fi
  done

  cauldron_toolchain_compiler_test "$chroot"
  liberror_check || return $ERR_TOOLCHAIN_BASEROOT_TEST

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param baseroot (optional)
##
## Sets up a toolchain chroot by acquiring and unpacking an already prepared
## basesystem chroot rather than generating one using the host system. If the
## optional parameter baseroot is provided, it will use that instead of
## downloading a fresh image. The provided baseroot can either be an unpacked
## directory or a (possibly compressed) archive.
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_baseroot() {
  local baseroot="${1:-$CAULDRON_BASEROOT}"
  local baseroot_url="$CAULDRON_BASEROOT_URL"
  local baseroot_sig="$CAULDRON_BASEROOT_SIGN_URL"
  local chroot="$CAULDRON_BUILD"
  local baseroot_path=$("${CAULDRON_CMD_READLINK[@]}" "$baseroot")

  if [[ -d "$baseroot_path" ]]
  then
    if [[ "$baseroot_path" != "$chroot" ]]
    then
      if [[ -d "$chroot" ]]
      then
        rmdir "$chroot" || return "$ERR_TOOLCHAIN_BASEROOT"
      fi
      ln -sf "$baseroot_path" "$chroot" || return "$ERR_TOOLCHAIN_BASEROOT"
    fi
  else
    # ensure that the target chroot directory exists
    "${CAULDRON_CMD_MKDIR[@]}" "$chroot" || return $ERR_TOOLCHAIN_BASEROOT

    [[ "${baseroot%%[^/]*}" == "/" ]] || baseroot="$CAULDRON_TMP/$baseroot"
    if [[ ! -f "$baseroot" ]]
    then
      # get a fresh basesystem chroot package
      (
        cd "$CAULDRON_TMP"
        "${CAULDRON_CMD_URL_DL[@]}" "$baseroot_url"
          liberror_check $ERR_TOOLCHAIN_BASEROOT \
            "could not acquire baseroot image file" ||
              return $ERR_TOOLCHAIN_BASEROOT
        "${CAULDRON_CMD_URL_DL[@]}" "$baseroot_sig"
          liberror_check $ERR_TOOLCHAIN_BASEROOT \
            "could not acquire baseroot signature file" ||
              return $ERR_TOOLCHAIN_BASEROOT
      )
      liberror_check || return $?
    fi

    # unpack it
    "${CAULDRON_CMD_UNPACK_BUILD[@]}" "$baseroot" ||
      return $ERR_TOOLCHAIN_BASEROOT
  fi

  # perform basic sanity checking on the chroot
  # return whatever error code baseroot_test gives back to us
  cauldron_toolchain_baseroot_test "$chroot"
  liberror_check || return $?

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param list of spells (optional)
##
## Generates a spell cache by casting the spell and then dispelling it. This
## assumes that ARCHIVE is already set to "yes" in the chroot's sorcery config.
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_cache_cast() {
  local spells=("${@:-$CAULDRON_TOOLCHAIN}")

  # if $spells points to a file, replace it with the contents of the file as an
  # array
  [[ -f "$spells" ]] && spells=($(<"$spells"))

  [[ -n "$spells" ]] || return $ERR_TOOLCHAIN_CAST

  # make sure we have a chroot accessible
  # default to $CAULDRON_BUILD, unless one is already defined
  cauldron_chroot_init || return $ERR_CHROOT_INIT

  # generate the caches for the needed spells
  cauldron_chroot_cast_clean "$spells" || return $ERR_TOOLCHAIN_CAST

  # clean up the chroot
  cauldron_chroot_done || return $ERR_CHROOT_DONE

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## This builds the cross-compiler to produce the TARGET binaries.
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_build_cross() {
  # make sure we have a chroot accessible
  # default to $CAULDRON_BUILD, unless one is already defined
  cauldron_chroot_init || return $ERR_CHROOT_INIT

  # build the stage 1 tools
  cauldron_sorcerous_cross_configure 1 || return $ERR_TOOLCHAIN_STAGE1
  cauldron_chroot_cast "binutils" || return $ERR_CHROOT_CAST
  cauldron_chroot_cast "gcc" || return $ERR_CHROOT_CAST

  # build glibc (stage 2)
  cauldron_sorcerous_cross_configure 2 || return $ERR_TOOLCHAIN_STAGE2
  cauldron_chroot_cast "glibc" || return $ERR_CHROOT_CAST

  # rebuild gcc (still stage 1, but this time linked against the
  # cross-glibc
  cauldron_sorcerous_cross_configure 1 || return $ERR_TOOLCHAIN_STAGE1
  cauldron_chroot_cast "gcc" || return $ERR_CHROOT_CAST

  # do a sorcery rebuild inside the BUILD dir to
  # generate the cross-compile tool-chain (stage 3)
  cauldron_sorcerous_cross_configure 3 || return $ERR_TOOLCHAIN_STAGE3
  cauldron_chroot "${CAULDRON_CMD_REBUILD[@]}" || return $ERR_CHROOT_REBUILD

  # if we had to initialize a default chroot
  # clean up by shutting it down
  cauldron_chroot_done || return $ERR_CHROOT_DONE
}


#-------------------------------------------------------------------------------
##
## Download the linux kernel sources from the net
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_kernel_source() {
  local spool="$CAULDRON_BUILD/var/spool/sorcery"
  srcfile="$spool/${CAULDRON_KERNEL_URL##*/}"
  sigfile="$spool/${CAULDRON_KERNEL_SIGN_URL##*/}"

  [[ -f "$srcfile" ]] && return $ERR_OK

  if [[ ! -d "$spool" ]]
  then
    "${CAULDRON_CMD_MKDIR[@]}" "$spool"
    liberror_check || return $?
  fi

  (
    cd "$spool"

    "${CAULDRON_CMD_URL_DL[@]}" "$CAULDRON_KERNEL_URL"
    liberror_check "kernel source url: $CAULDRON_KERNEL_URL" ||
      return $ERR_TOOLCHAIN_KSRC
    liberror_check "kernel source url: $CAULDRON_KERNEL_SIGN_URL" ||
      return $ERR_TOOLCHAIN_KSRC
  )

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Download the toolchain suite sources from the net
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_sources() {
  local force="$1"
  local urls=(
              "$CAULDRON_SYSUTILS_URL"
              "$CAULDRON_COMPILER_URL"
              "$CAULDRON_LIBC_URL"
              "$CAULDRON_AUTOCONF_URL"
              "$CAULDRON_AUTOMAKE_URL"
              "$CAULDRON_MAKE_URL"
              "$CAULDRON_PERL_URL"
             )
  local sigs=(
              "$CAULDRON_SYSUTILS_SIGN_URL"
              "$CAULDRON_COMPILER_SIGN_URL"
              "$CAULDRON_LIBC_SIGN_URL"
              "$CAULDRON_AUTOCONF_SIGN_URL"
              "$CAULDRON_AUTOMAKE_SIGN_URL"
              "$CAULDRON_MAKE_SIGN_URL"
              "$CAULDRON_PERL_SIGN_URL"
             )

  if [[ ! -d "$CAULDRON_BUILD/var/spool/sorcery" ]]
  then
    "${CAULDRON_CMD_MKDIR[@]}" "$CAULDRON_BUILD/var/spool/sorcery"
    liberror_check || return $?
  fi

  (
    cd "$CAULDRON_BUILD/var/spool/sorcery"
    liberror_check || return $?

    for ((i=0; i<"${#urls[@]}"; i++))
    do
      url="${urls[i]}"
      sig="${sigs[i]}"
      if [[ -f "${url##*/}" ]]
      then
        if [[ -n "$force" ]]
        then
          "${CAULDRON_CMD_RM_FORCE[@]}" "${url##*/}"
        else
          continue
        fi
      fi

      "${CAULDRON_CMD_URL_DL[@]}" "$url"
      liberror_check "$url" || return $ERR_TOOLCHAIN_SOURCES
      "${CAULDRON_CMD_URL_DL[@]}" "$sig"
      liberror_check "$sig" || return $ERR_TOOLCHAIN_SOURCES
    done
  )

  return $ERR_OK
}

function cauldron_toolchain_unpack() {
  local target="$1"
  local archive=

  [[ -n "$target" ]] || return $ERR_TOOLCHAIN_UNPACK

  if [[ ! -d "$CAULDRON_BUILD/usr/src" ]]
  then
    "${CAULDRON_CMD_MKDIR[@]}" "$CAULDRON_BUILD/usr/src"
    liberror_check || return $?
  fi

  if [[ -d "$CAULDRON_BUILD/var/spool/sorcery" ]]
  then
    "${CAULDRON_CMD_MKDIR[@]}" "$CAULDRON_BUILD/var/spool/sorcery" ||
      return $ERR_TOOLCHAIN_UNPACK
  fi

  eval target="\$CAULDRON_$target-\$CAULDRON_${target}_VERS"

  archive=( $(ls "$CAULDRON_BUILD/var/spool/sorcery/$target"*) )
  archive="${archive[0]}"

  [[ -n "$archive" ]] || return $ERR_TOOLCHAIN_UNPACK

  cauldron_verbose "Unpacking toolchain source: $target"

  "${CAULDRON_CMD_UNPACK_BUILD_SRC[@]}" "$archive" ||
    return $?

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param component to configure
##
## Configures the specified component for building. This assumes that the
## relevant sources are already available under the chroot's /usr/src directory.
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_configure_component() {
  local component="$1"
  local srcdir="$CAULDRON_BUILD/usr/src"
  local config=
  local targetdir=
  local targetconf=

  [[ -n "$component" ]] || return $ERR_TOOLCHAIN_CONFIGURE

  case "$component" in
    kernel)
      case "$CAULDRON_KERNEL" in
        linux)
          config="$CAULDRON_KERNEL_CONF"
          targetdir="$srcdir/$CAULDRON_KERNEL-$CAULDRON_KERNEL_VERS"
          targetconf="$targetdir/.config"
          ;;
      esac
      ;;
    sysutils)
      case "$CAULDRON_SYSUTILS" in
        busybox)
          config="$CAULDRON_SYSUTILS_CONF"
          targetdir="$srcdir/$CAULDRON_SYSUTILS-$CAULDRON_SYSUTILS_VERS"
          targetconf="$targetdir/.config"
          ;;
      esac
      ;;
  esac

  if [[ ! -f "$config" ]]
  then
    cauldron_verbose_error "kernel config file $config not found"
    return $ERR_TOOLCHAIN_CONFIGURE
  fi

  [[ -d "$targetdir" ]] || return $ERR_TOOLCHAIN_CONFIGURE


  "${CAULDRON_CMD_CAT[@]}" "$config" > "$targetconf"
  liberror_check "component: $component" || return $ERR_TOOLCHAIN_CONFIGURE

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Extracts and installs the kernel headers for userland in the build chroot.
## Assumes that the kernel sources are already available and configured.
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_kernel_headers() {
  local kern="$CAULDRON_KERNEL"
  local vers="$CAULDRON_KERNEL_VERS"
  local karch="$CAULDRON_ARCH"

  [[ -n "$kern" ]] || return $ERR_KERNEL
  [[ -n "$vers" ]] || return $ERR_KERNEL

  cauldron_chroot_init
  liberror_check || return $?

  # adjust the arch for linux if x86_64
  if [[ "$kern" == "linux" ]]
  then
    case "$karch" in
      x86_64 )
        #karch="x86"
        true
        ;;
    esac
  fi

  case "$CAULDRON_KERNEL" in
    linux)
      cauldron_chroot make -C "/usr/src/$kern-$vers" \
        INSTALL_HDR_PATH="/usr" \
        ARCH="$karch" \
        headers_install
      liberror_check || return $?
      ;;
  esac

  cauldron_chroot_done
  liberror_check || return $?

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Unpacks the kernel sources and copies the cauldron configuration for the
## kernel into the kernel source directory.
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_kernel_prepare() {
  local kern="$CAULDRON_KERNEL"
  local vers="$CAULDRON_KERNEL_VERS"
  local conf="$CAULDRON_KERNEL_CONF"
  local target="$CAULDRON_BUILD/usr/src/$kern-$vers"

  cauldron_toolchain_unpack "KERNEL"
  liberror_check "kernel source" || return $?

  case "$kern" in
    linux )
      target="$target/.config"
      ;;
    * )
      target=""
  esac

  if [[ -n "$target" ]]
  then
    "${CAULDRON_CMD_CP[@]}" "$conf" "$target" ||
      return $ERR_CP_FILE
  fi
}

#-------------------------------------------------------------------------------
##
## Does any work necessary to bootstrap a working compiler inside the toolchain
## chroot before it can be used for building sys and iso packages
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_compiler_bootstrap() {
  # prepare chroots to $CAULDRON_BUILD
  cauldron_chroot_init
  liberror_check || return $?

  case "$CAULDRON_COMPILER" in
    gcc )
      # retool gcc
      cauldron_chroot sorcery unhold gmp mpfr libmpc
      cauldron_chroot cast -c gmp mpfr libmpc
      liberror_check || return $?
      cauldron_chroot_cast -c gcc
      liberror_check || return $?
      cauldron_toolchain_compiler_test
      liberror_check || return $?
      ;;
    * )
      ;;
  esac

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Builds all the necessary toolchain components. This will attempt to download
## any sources that can't already be found.
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_build() {
  # ensure that the toolchain kernel headers are available for building the
  # toolchain against -- this kernel will be built and added to the iso later,
  # and the sources will be available for sys
  cauldron_toolchain_kernel_prepare
  liberror_check "kernel prepare" || return $?
  cauldron_toolchain_kernel_headers
  liberror_check "kernel headers" || return $?

  # build the toolchain suite components (compiler, libc, make, autotools,
  # etc.) -- only those needed for basic compilation from source for core
  # software
  for unit in compiler libc make automake autoconf sysutils #perl
  do
    cauldron_toolchain_build_component "$unit"
    liberror_check "toolchain component: $unit" || return $ERR_TOOLCHAIN_BUILD
  done

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param component to build
##
## Builds the specified toolchain component in the toolchain chroot. This
## assumes that the relevant sources are already unpacked and available under
## the chroot's usr/src directory.
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_build_component() {
  local component="$1"
  local srcdir="$CAULDRON_BUILD/usr/src"
  local target=

  case "$component" in
    compiler)
      target="$CAULDRON_COMPILER-$CAULDRON_COMPILER_VERS"
      ;;
    libc)
      target="$CAULDRON_LIBC-$CAULDRON_LIBC_VERS"
      ;;
    kernel)
      target="$CAULDRON_KERNEL-$CAULDRON_KERNEL_VERS"
      ;;
    binutils)
      target="binutils-$CAULDRON_BINUTILS_VERS"
      ;;
    make)
      target="make-$CAULDRON_MAKE_VERS"
      ;;
    automake)
      target="automake-$CAULDRON_AUTOMAKE_VERS"
      ;;
    autoconf)
      target="autoconf-$CAULDRON_AUTOCONF_VERS"
      ;;
    perl)
      target="perl-$CAULDRON_PERL_VERS"
      ;;
    sysutils)
      target="$CAULDRON_SYSUTILS-$CAULDRON_SYSUTILS_VERS"
      ;;
    *) return $ERR_TOOLCHAIN_COMPONENT ;;
  esac

  cauldron_toolchain_unpack "$target"
  liberror_check "$component" || return $?

  # for components that need a particular configuration, copy over the
  # preconfigured file before starting the build
  if [[ -n "$config" ]]
  then
    cauldron_toolchain_configure_component "$component" "$srcdir/$target"
    liberror_check || return $?
  fi

  cauldron_chroot_init
  liberror_check || return $?

  # run autotools as necessary
  if [[ -x "$srcdir/$target/configure" ]]
  then
    cauldron_chroot sh -c "cd /usr/src/$target && configure"
    liberror_check || return $?
  fi

  # build and install
  cauldron_chroot sh -c "cd /usr/src/$target && make && make install"
  liberror_check || return $?

  if [[ "$component" == "linux" ]]
  then
    cauldron_chroot sh -c "cd /usr/src/$target && make modules_install"
    liberror_check || return $?
  fi

  # clean up after a successful build
  cauldron_chroot rm -r "/usr/src/$target"

  cauldron_chroot_done
  liberror_check || return $?

  return $ERR_OK
}


#-------------------------------------------------------------------------------
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#-------------------------------------------------------------------------------

# vim:ai:tw=80:tabstop=2:softtabstop=2:shiftwidth=2:expandtab
