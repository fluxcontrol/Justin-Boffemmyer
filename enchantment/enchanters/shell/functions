#!/bin/bash
#-------------------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
##  These are the functions used by the SMGL shell installer.
##  Take care not to pollute the user's namespace too much,
##  and make sure your functions don't (accidentally) collide
##  with existing commands.
##
##=head1 COPYRIGHT
##
##  Copyright 2010 by the Cauldron Team
##
##=head1 FUNCTIONS
##
##=over 4
##
#-------------------------------------------------------------------------------

# print a standardized header
# if given a filename for an argument, it will print the contents of the file
# after the header
function enchant_shell_header() {
  printf "\n\n\n"

  # if arg1 supplied, cat it
  if [[ -n "$1" ]]
  then
    [[ -f "$1" ]] || return $ERR_FILE_ACCESS
    "${ENCHANT_CMD_CAT[@]}" "$1" || return $ERR_FILE_ACCESS
  fi

  return $ERR_OK
}

# output the step instructions
# use color if desired, else just plain bold
function enchant_shell_print() {
  local file="$1"
  local hilight=""
  local normal=""

  [[ -f "$file" ]] || return $ERR_FILE_ACCESS

  if [[ "$ENCHANT_COLOR" == "yes" ]]
  then
    hilight="$(libcolor_color NOTICE_COLOR)"
    normal="$(libcolor_color NORMAL_COLOR)"
  else
    hilight="$(libcolor_color BOLD)"
    normal="$(libcolor_color NORMAL)"
  fi

  # replace instances of "@[...]" with $hilight...$normal in situ
  # the color codes have to be used directly (rather than the libcolor_ message
  # functions) due to the in situ nature of the markup, otherwise we would have
  # to overly complicate the instruction printing function by printing one line
  # at a time
  "${ENCHANT_CMD_SED[@]}" "s/@\[\([^]]*\)\]/$hilight\1$normal/g;" "$file" ||
    return $ERR_FILE_ACCESS

  return $ERR_OK
}

# display module names with short descriptions in columns
function enchant_shell_modules() {
  local list=""
  local module=""
  local padded=""
  local file=""
  local col_width="0"

  # get the list of modules
  list=( $(enchant_modules_list) )

  [[ "${#list[*]}" -eq 0 ]] && return $ERR_MODULE_NONE

  # get the width of the widest column
  for col in ${list[*]}
  do
    [[ "${#col}" -gt "$col_width" ]] && col_width="${#col}"
  done

  enchant_shell_header
  liberror_check || return $?

  for module in ${list[*]}
  do
    # pad the output to align the columns
    padded="$module"
    while [[ "${#padded}" -lt "$col_width" ]]
    do
      padded="$padded "
    done

    file="$ENCHANT_MODULES/${module}/description"
    if [[ -r "$file" ]]
    then
      # output name and info in columns
      "${ENCHANT_CMD_OUTPUT[@]}" "$padded" |
        "${ENCHANT_CMD_PASTE[@]}" - "$file" ||
          return $ERR_OUTPUT
    else
      # module exists but its description data is missing
      "${ENCHANT_CMD_OUTPUT[@]}" -e \
        "$padded\t$(libcolor_error \(description not available\))" ||
          return $ERR_OUTPUT
    fi
  done

  return $ERR_OK
}

function enchant_shell_perform_variable() {
  local list="$@"
  local var=
  local value=
  local llist=

  [[ "$#" -eq 0 ]] && list=( ${!ENCHANT_*} )

  for var in "${list[@]}"
  do
    # check for user-desired globbing
    if [[ "${var%\*}" != "$var" ]]
    then
      eval llist=( \${!${var}} )
      for i in "${llist[@]}"
      do
        value=$(enchant_get_variable "$var")
        liberror_check || return $?

        libcolor_msg notice "$var: $(libcolor_info $value)"
      done
    else
      value=$(enchant_get_variable "$var")
      liberror_check || return $?

      libcolor_msg notice "$var: $(libcolor_info $value)"
    fi
  done | "${ENCHANT_CMD_PAGER[@]}" || return $ERR_OUTPUT

  return $ERR_OK
}

function enchant_shell_perform_todo() {
  local curstep="${1:-$(enchant_get_current)}"

  [[ -z "$curstep" ]] && return $ERR_GET_CURRENT

  # output the header
  enchant_shell_header
  liberror_check || return $?

  # output the current module's instructions
  enchant_shell_print "$ENCHANT_MODULES/$curstep/instructions"
  liberror_check || return $?

  return $ERR_OK
}

function enchant_shell_perform_next() {
  enchant_set_next
  liberror_check || return $?

  enchant_shell_perform_todo
  liberror_check || return $?

  return $ERR_OK
}

function enchant_shell_perform_prev() {
  enchant_set_prev
  liberror_check || return $?

  enchant_shell_perform_todo
  liberror_check || return $?

  return $ERR_OK
}

function enchant_shell_perform_back() {
  enchant_back
  liberror_check || return $?

  return $ERR_OK
}

function enchant_shell_perform_forward() {
  enchant_forward
  liberror_check || return $?

  return $ERR_OK
}

function enchant_shell_perform_list_modules() {
  enchant_shell_modules
  liberror_check || return $?

  return $ERR_OK
}

function enchant_shell_perform_jump() {
  local rc=""

  enchant_set_current $*
  rc="$?"
  liberror_check "$rc" "'$@'"

  if [[ "$rc" -eq $ERR_SET_CURRENT ]]
  then
    "${ENCHANT_CMD_OUTPUT[@]}" \
      "Type $(libcolor_notice enchantment list) to see a list of steps." ||
        return $ERR_OUTPUT
  fi

  return $rc
}

function enchant_shell_perform_welcome() {
  enchant_shell_perform_todo "welcome"
  liberror_check || return $?
}

function enchant_shell_perform_help() {
  helpfile="$ENCHANT_MODULES/help/${1:-index}"

  if [[ ! -f "$helpfile" ]]
  then
    if [[ -n "$1" ]]
    then
      libcolor_msg warn "No installer help for '$1'"
    else
      return $ERR_TARGET
    fi
  fi

  enchant_shell_header
  liberror_check || return $?
  enchant_shell_print "$helpfile"
  liberror_check || return $?

  return $ERR_OK
}

function enchant_shell_perform_chroot() {
  enchant_chroot_init
  liberror_check || return $?

  # set the prompt to let the user know
  # we are entering... the Chroot Zone
  PS1="[inside chroot, type"
  PS1="$PS1 $(libcolor_notice exit)"
  PS1="$PS1 to return to installer]"
  PS1="${PS1}\n\u \w\$ "
  export PS1

  if [[ "$ENCHANT_COLOR" == "yes" ]]
  then
    export LS_COLORS="$(${ENCHANT_CMD_DIRCOLORS[@]})"
  fi

  enchant_chroot "$@"
  liberror_check || return $?

  enchant_chroot_done
  liberror_check || return $?

  return $ERR_OK
}

function enchant_shell_keymap_list {
  local choices=( "$@" )
  local max="${#choices[*]}"
  local i=""

  [[ "$max" -lt 1 ]] && return $ERR_INSTALLER_KEYMAP

  if [[ "$max" -gt 20 ]]
  then
    for ((i=0; i < "$max"; i++))
    do
      printf "\n[%2d] %s\n" "$(($i + 1))" "${choices[i]}"
    done | "${ENCHANT_CMD_COLUMN[@]}" | "${ENCHANT_CMD_PAGER[@]}"
  else
    for ((i=0; i < "$max"; i++))
    do
      printf "\n\t\t\t[%2d] %s\n" "$(($i + 1))" "${choices[i]}"
    done | "${ENCHANT_CMD_PAGER[@]}"
  fi

  return $ERR_OK
}

function enchant_shell_keymap_info() {
  local i="0"

  local msgs=(
    "First, choose your keyboard's hardware type from the list below."
    "Some hardware types will also have a subtype,"
    "which will be presented in another menu."
    "After you are done choosing your hardware type (and subtype),"
    "choose your preferred keymapping from the menu you are presented with."
    ""
    "You may enter 0 to go back to a previous menu."
  )

  # print a header
  printf "\n\t$(libcolor_notice Keymap Selection Menu)\n\n"

  # print the welcome information
  for ((i; i < "${#msgs[*]}"; i++))
  do
    printf "\t$(libcolor_notice ${msgs[i]})\n"
  done

  return $ERR_OK
}

function enchant_shell_keymap_prompt() {
  # print an indented prompt
  printf "\n\t"
  libcolor_notice "Please enter a number (0 to go back, * to exit): "
}

function enchant_shell_perform_keymap() {
  local choices=()
  local prefix=""
  local rc=""

  # print the initial welcome info
  enchant_shell_keymap_info

  while [[ "$rc" -ne "$ERR_KEYMAP_EXIT" ]]
  do
    # get the list of choices
    choices=( $(enchant_i18n_keymap_make_list "$prefix") )

    # print the list of choices as a numbered menu
    enchant_shell_keymap_list "${choices[@]}"

    # print a prompt, with indentation
    enchant_shell_keymap_prompt

    # get user input and update the menu prefix
    # enchant_i18n_keymap_input will automatically set the keymap if the input
    # is for a specific keymap rather than a directory
    prefix=$(enchant_i18n_keymap_input_handler "$prefix" "${#choices[@]}")
    rc="$?"

    # if we got bad input, just repeat the loop until we get good input
    # but warn the user so they know what happened
    if [[ "$rc" -ge 1 ]]
    then
      case "$rc" in
        # exit is handled by the loop condition itself, so we don't need to do
        # anything for this one
        $ERR_KEYMAP_EXIT )
          break
          ;;
        # if there was a problem with the input, let the user know and re-loop
        $ERR_KEYMAP_INPUT )
          "${ENCHANT_CMD_OUTPUT[@]}" \
            "Error: You must enter a number corresponding to one" \
            "of the choices in the list above!" ||
              return $ERR_OUTPUT
          ;;
        * )
          # return any errors which weren't explicitly handled above
          liberror_check || return $rc
          ;;
      esac
    fi
  done

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#-------------------------------------------------------------------------------

# vim:ai:tw=80:tabstop=2:softtabstop=2:shiftwidth=2:expandtab
