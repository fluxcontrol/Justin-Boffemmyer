#!/bin/bash
#-------------------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
##  Common functions and variables for different installers
##
##=head1 DESCRIPTION
##
##  This file provides common function and variable definitions for
##  the different types of installers that can be included on an ISO.
##  This file is meant to be sourced by the different installers,
##  so this file should not be run directly. This file, as well as
##  the installer which sources this file, is meant to be called from
##  inside the ISO during the actual install onto the target system.
##
##=head1 COPYRIGHT
##
##  Copyright 2009 The Cauldron Team
##
##=head1 FUNCTIONS
##
##=over 4
##
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# function definitions
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
## @param name
##
## Generates a temporary directory for storing state information, relative to
## ENCHANT_POTION/.
##
#-------------------------------------------------------------------------------
function enchant_potion_new() {
  local potion="$1"

  [[ -n "$potion" ]] || return $ERR_TARGET
  [[ -d "$potion" ]] && return $ERR_DIR_EXISTS

  mkdir -p "$ENCHANT_POTION/$potion" || return $ERR_MK_DIR

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Initializes the potion subsystem
##
#-------------------------------------------------------------------------------
function enchant_potion_init() {
  local initpotion="default"

  mkdir -p "$ENCHANT_POTION" || return $ERR_MK_DIR
  echo "" > "$ENCHANT_BACK" || return $ERR_WRITE_FILE
  echo "" > "$ENCHANT_FORWARD" || return $ERR_WRITE_FILE

  enchant_potion_new "$initpotion"
  liberror_check || return $?
  enchant_potion_set_current "$initpotion"
  liberror_check || return $?

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Gets the current potion name (temporary directory tied to the history level)
##
#-------------------------------------------------------------------------------
function enchant_potion_get_current() {
  local pdir="$ENCHANT_POTION"
  local pfile="$pdir/.current"
  local current="$ENCHANT_POTION_CURRENT"

  if [[ -z "$current" ]]
  then
    [[ -d "$pdir" ]] || return $ERR_POTION_DIR
    [[ -f "$pfile" ]] || return $ERR_POTION_CURRENT

    current=$(< $pfile) || return $ERR_POTION_CURRENT
    [[ -d "$current" ]] || return $ERR_DIR_ACCESS
    ENCHANT_POTION_CURRENT="$current"
  fi

  printf "%s" "$current"

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param potion directory name (relative to $ENCHANT_POTION/)
##
## Sets the current potion name (temporary directory tied to the history level)
##
#-------------------------------------------------------------------------------
function enchant_potion_set_current() {
  local potion="$1"
  local pdir="$ENCHANT_POTION"

  if ! [[ -d "$potion" ]]
  then
    if [[ -d "$pdir/$potion" ]]
    then
      potion="$pdir/$potion"
    else
      return $ERR_DIR_ACCESS
    fi
  fi

  echo "$potion" > "$ENCHANT_POTION/.current" || return $ERR_WRITE_FILE
  ENCHANT_POTION_CURRENT="$potion"

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param file to get the hash for (relative to the current potion dir)
## @param potion directory name (relative to $ENCHANT_POTION/) [optional]
##
## Gets the stored hashsum of the given file. A deleted file results in a cached
## hashsum consisting of a single "0" and no cached file content. A file that
## hasn't yet been cached (something new) should have neither cached content nor
## a cached hashsum, and this is not an error.
##
#-------------------------------------------------------------------------------
function enchant_potion_get_hashsum() {
  local file="$1"
  local potion="${2:-$ENCHANT_POTION_CURRENT}"
  local pfile="$ENCHANT_POTION/$potion/${file##*/}"
  local hashname="${ENCHANT_POTION_HASHFUNC##*/}"

  if [[ ! -f "$pfile" ]] && [[ ! -f "${pfile}.${hashname}" ]]
  then
    # the file hasn't yet been cached
    echo ""
    return $ERR_OK
  fi

  cut -d' ' -f1 "$ENCHANT_POTION/$potion/${pfile}.${hashname}" ||
    return $ERR_POTION_GET_HASHSUM

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param file to hash (absolute path)
## @param potion directory name (relative to $ENCHANT_POTION/) [optional]
##
## Checksums a file so that the file can be checked for changes later. Stores
## the checksum in the potion directory as file.hash_function, where
## hash_function is defined by ENCHANT_HASHFUNC in the enchantment config file.
##
#-------------------------------------------------------------------------------
function enchant_potion_set_hashsum() {
  local file="$1"
  local potion="${2:-$ENCHANT_POTION_CURRENT}"
  local hashfunc="$ENCHANT_POTION_HASHFUNC"
  local pfile="$potion/${file##*/}.${hashfunc##*/}"

  [[ -d "$potion" ]] || return $ERR_DIR_ACCESS

  if [[ -f "$file" ]]
  then
    "$hashfunc" "$file" > "$pfile" || return $ERR_POTION_SET_HASHSUM
  else
    echo "0" > "$pfile" || return $ERR_POTION_SET_HASHSUM
  fi

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param file to check/cache (absolute path)
## @param potion directory name (relative to $ENCHANT_POTION/) [optional]
##
## Includes a file into the state cache for later archival if the stored
## checksum doesn't match or there is not stored checksum.
##
#-------------------------------------------------------------------------------
function enchant_potion_cache_file() {
  local file="$1"
  local potion="${2:-$ENCHANT_POTION_CURRENT}"
  local pfile=""
  local sum1=""
  local sum2=""

  # last-ditch effort to ensure we have a valid current potion to work with
  if ! [[ -d "$potion" ]]
  then
    potion=$(enchant_potion_get_current)
    [[ -d "$potion" ]] || return $ERR_DIR_ACCESS
  fi

  # set the target file path
  pfile="$potion/${file##*/}"

  # if the file doesn't exist, then either it didn't exist to begin with, or the
  # user (purposely) deleted it, so we track that the requested file doesn't
  # exist by giving it an invalid hash
  if [[ -f "$file" ]]
  then
    sum1="$($ENCHANT_POTION_HASHFUNC $file | cut -d' ' -f1)" ||
      return $ERR_POTION_SET_HASHSUM
  else
    sum1=0
  fi

  sum2="$(enchant_potion_get_hashsum $file $potion)" ||
    return $ERR_POTION_SET_HASHSUM

  # only update if the checksums differ or we don't already have the hashsum
  if [[ "$sum1" != "$sum2" ]]
  then
    # generate and store the (new) hashsum of the file
    enchant_potion_set_hashsum "$file" "$potion"
    liberror_check "$file" || return $ERR_POTION_CACHE_FILE

    # store the file itself, but only if it's a valid file (i.e. not deleted)
    if [[ "$sum1" && "$sum1" != "0" ]]
    then
      "${ENCHANT_CMD_CP_FORCE[@]}" "$file" "$pfile" ||
        return $ERR_POTION_CACHE_FILE
    fi
  fi

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param target (the data field to extract)
## @param output_file (defaults to $ENCHANT_POTION/target) [optional]
##
## Parses /proc/mounts to extract the requested target data, excluding the list
## of ISO mounts, and stores the information in output_file.
##
#-------------------------------------------------------------------------------
function enchant_potion_get_diskinfo() {
  local target="$1"
  local potion="${2:-$ENCHANT_POTION}"
  local excl="$ENCHANT_POTION_MOUNT_EXCLUDES"
  local src="/proc/mounts"
  local record=""

  [[ -d "$potion" ]] || return $ERR_POTION_DIR

  case "$target" in
    "partitions" )
      record=1
      ;;
    "mount_points" )
      record=2
      ;;
    "filesystems" )
      record=3
      ;;
    * )
      return $ERR_TARGET
      ;;
  esac

  [[ "$target" == $potion* ]] || target="$potion/$target"

  [[ -n "$excl" ]] || return $ERR_POTION_GET_DISKINFO
  excl=(-v i="${excl[@]}")

  [[ "$record" -gt 0 ]] || return $ERR_POTION_GET_DISKINFO

  # for every line, if the 2nd field exactly matches one of excl, skip it
  # otherwise, store the source data to the target file
  "${ENCHANT_CMD_AWK[@]}" "${excl[@]}" \
    "{if(match(i,\$2)) next; else print \$$record}" "$src" \
    > "$target" ||
      return $ERR_POTION_GET_DISKINFO
}

#-------------------------------------------------------------------------------
## @param potion directory name (relative to $ENCHANT_POTION/) [optional]
##
## Checks to see if the list of partitions has changed, excluding the list of
## iso mounts, and updates the state cache if they were changed.
##
#-------------------------------------------------------------------------------
function enchant_potion_update_partitions() {
  local potion="${1:-$ENCHANT_POTION_CURRENT}"
  local target="partitions"

  enchant_potion_get_diskinfo "$target"
  liberror_check "$target" || return $ERR_POTION_UPDATE_PARTITIONS

  enchant_potion_cache_file "$ENCHANT_POTION/$target" "$potion"
  liberror_check "$target" || return $ERR_POTION_UPDATE_PARTITIONS

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param potion directory name (relative to $ENCHANT_POTION/) [optional]
##
## Checks to see if the list of filesystems corresponding to partitions has
## changed, excluding the iso mounts, and updates the state cache if they were
## changed.
##
#-------------------------------------------------------------------------------
function enchant_potion_update_filesystems() {
  local potion="${1:-$ENCHANT_POTION_CURRENT}"
  local target="filesystems"

  enchant_potion_get_diskinfo "$target"
  liberror_check "$target" || return $ERR_POTION_UPDATE_PARTITIONS

  enchant_potion_cache_file "$ENCHANT_POTION/$target" "$potion"
  liberror_check "$target" || return $ERR_POTION_UPDATE_FILESYSTEMS

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param potion directory name (relative to $ENCHANT_POTION/) [optional]
##
## Checks to see if the list of mount points (/, /usr, etc.) corresponding to
## partitions/filesystems has changed, excluding the iso mounts, and updates the
## state cache if they were changed.
##
#-------------------------------------------------------------------------------
function enchant_potion_update_mount_points() {
  local potion="${1:-$ENCHANT_POTION_CURRENT}"
  local target="mount_points"

  enchant_potion_get_diskinfo "$target"
  liberror_check "$target" || return $ERR_POTION_UPDATE_PARTITIONS

  enchant_potion_cache_file "$ENCHANT_POTION/$target" "$potion"
  liberror_check "$target" || return $ERR_POTION_UPDATE_MOUNT_POINTS

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param potion directory name (relative to $ENCHANT_POTION/) [optional]
##
## If a user chose to install a custom kernel, this checks for the config being
## used. Updates the state cache if the kernel config changed.
##
#-------------------------------------------------------------------------------
function enchant_potion_update_kernel_config() {
  local potion="${1:-$ENCHANT_POTION_CURRENT}"
  local kernel_config="$ENCHANT_TARGET/usr/src/linux/.config"

  enchant_potion_cache_file "$kernel_config" "$potion"
  liberror_check "$kernel_config" || return $ERR_POTION_CACHE_FILE

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param potion directory name (relative to $ENCHANT_POTION/) [optional]
##
## Checks which kernel(s) the user has opted to install (ISO, custom, etc.).
## Updates the state cache if the kernel choice changed.
##
#-------------------------------------------------------------------------------
function enchant_potion_update_kernel() {
  local potion="${1:-$ENCHANT_POTION_CURRENT}"
  local kernels="$ENCHANT_TMP/kernels"

  enchant_potion_cache_file "$kernels" "$potion"
  liberror_check "$kernel" || return $ERR_POTION_CACHE_FILE

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param potion directory name (relative to $ENCHANT_POTION/) [optional]
##
## Checks which optional spell sources the user has chosen to install, and
## updates the state cache if the list changed.
##
#-------------------------------------------------------------------------------
function enchant_potion_update_spell_sources() {
  local potion="${1:-$ENCHANT_POTION_CURRENT}"
  local spells="$ENCHANT_TMP/sources"

  enchant_potion_cache_file "$spells" "$potion"
  liberror_check "$spells" || return $ERR_POTION_CACHE_FILE

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param potion directory name (relative to $ENCHANT_POTION/) [optional]
##
## Checks which optional spell caches the user has chosen to install, and
## updates the state cache if the list changed.
##
#-------------------------------------------------------------------------------
function enchant_potion_update_spell_caches() {
  local potion="${1:-$ENCHANT_POTION_CURRENT}"
  local spells="$ENCHANT_TMP/caches"

  enchant_potion_cache_file "$spells" "$potion"
  liberror_check "$spells" || return $ERR_POTION_CACHE_FILE

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param potion directory name (relative to $ENCHANT_POTION/) [optional]
##
## Checks which bootloader the user chose, and updates the state cache if the
## choice changed.
##
#-------------------------------------------------------------------------------
function enchant_potion_update_bootloader() {
  local potion="${1:-$ENCHANT_POTION_CURRENT}"
  local bootloaders="$ENCHANT_TMP/bootloaders"

  enchant_potion_cache_file "$bootloaders" "$potion"
  liberror_check "$bootloaders" || return $ERR_POTION_CACHE_FILE

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param potion directory name (relative to $ENCHANT_POTION/) [optional]
##
## Checks for updates to the config files in the target system, and updates the
## state cache if there were any changes.
##
#-------------------------------------------------------------------------------
function enchant_potion_update_confs() {
  local potion="${1:-$ENCHANT_POTION_CURRENT}"
  local conf=""

  for conf in $ENCHANT_POTION_CONFS
  do
    conf="$ENCHANT_TARGET/$conf"

    enchant_potion_cache_file "$conf" "$potion"
    liberror_check "$conf" || return $ERR_POTION_CACHE_FILE
  done

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param potion directory name (relative to $ENCHANT_POTION/) [optional]
##
## Checks for updates to /etc/passwd, /etc/group, etc. and updates the state
## cache if there were any changes.
##
#-------------------------------------------------------------------------------
function enchant_potion_update_users() {
  local potion="${1:-$ENCHANT_POTION_CURRENT}"
  local file=""

  for file in etc/passwd etc/group etc/shadow etc/gshadow
  do
    file="$ENCHANT_TARGET/$file"

    enchant_potion_cache_file "$file" "$potion"
    liberror_check "$file" || return $ERR_POTION_CACHE_FILE
  done

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param potion directory name (relative to $ENCHANT_POTION/) [optional]
##
## Checks various state data and performs any needed updates during the install.
##
#-------------------------------------------------------------------------------
function enchant_potion_update() {
  local potion="${1:-$ENCHANT_POTION_CURRENT}"

  enchant_potion_update_partitions "$potion"
  liberror_check || return $ERR_POTION_UPDATE_PARTITIONS
  enchant_potion_update_filesystems "$potion"
  liberror_check || return $ERR_POTION_UPDATE_FILESYSTEMS
  enchant_potion_update_mount_points "$potion"
  liberror_check || return $ERR_POTION_UPDATE_MOUNT_POINTS
  enchant_potion_update_spell_sources "$potion"
  liberror_check || return $ERR_POTION_UPDATE_SOURCES
  enchant_potion_update_spell_caches "$potion"
  liberror_check || return $ERR_POTION_UPDATE_CACHES
  enchant_potion_update_kernel "$potion"
  liberror_check || return $ERR_POTION_UPDATE_KERNEL
  enchant_potion_update_bootloader "$potion"
  liberror_check || return $ERR_POTION_UPDATE_BOOTLOADER
  enchant_potion_update_confs "$potion"
  liberror_check || return $ERR_POTION_UPDATE_CONFS
  enchant_potion_update_users "$potion"
  liberror_check || return $ERR_POTION_UPDATE_USERS

  return $ERR_OK
}


#-------------------------------------------------------------------------------
## @param potion
##
## Packages a potion (state) directory into an archive that can later be used to
## load (seed) an automated install.
##
#-------------------------------------------------------------------------------
function enchant_potion_bottle() {
  local potion="${1:-$ENCHANT_POTION_CURRENT}"
  local output="$ENCHANT_POTION_BOTTLE"

  [[ -d "$potion" ]] || return $ERR_DIR_ACCESS

  # package the potion into a compressed archive
  case "$ENCHANT_POTION_ARCHIVE" in
    "tar" )
      tar cf "${output}.tar" "$ENCHANT_POTION/$potion"/* ||
        return $ERR_POTION_ARCHIVE
      if [[ -n "$ENCHANT_POTION_COMPRESS" ]]
      then
        "$ENCHANT_POTION_COMPRESS" "${output}.tar" ||
          return $ERR_POTION_COMPRESS
      fi
      ;;
    "cpio" )
      (
        cd "$potion"
        find * | cpio -H newc -o > "${output}.io" ||
          return $ERR_POTION_ARCHIVE

        if [[ -n "$ENCHANT_POTION_COMPRESS" ]]
        then
          "$ENCHANT_POTION_COMPRESS" "${output}.io" ||
            return $ERR_POTION_COMPRESS
        fi
      )
      ;;
    * )
      return $ERR_POTION_ARCHIVE_FORMAT
  esac

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param potion (optional, defaults to ENCHANT_POTION_BOTTLE)
## @param -s start (optional)
## @param -e end (optional)
##
## If potion is an archive, it unpacks the archive and performs an automated
## install. If potion is a directory, it assumes it is a proper state directory
## (what an unpacked potion archive is) and does the same as for an archive, but
## skipping the unpacking step.
##
## If the start argument is given, it determines at which module to begin the
## automation (defaults to the first). If the end ## argument is given, it
## determines at which module to end the automation and at which module to end
## the automation (defaults to the last). Both start and end can be specified
## either as module names or (positional) module numbers. If '--' is passed as
## an argument, it forces the function to stop scanning for flag parameters so that
## one can pass in filenames beginning with a '-' and not experience an error.
##
## Once the potion is unpacked and ready, each module from start to end is
## processed in turn by calling enchant_modules_potion, which runs any
## module-specific scripts (in the module's directory) for processing potion
## actions.
##
#-------------------------------------------------------------------------------
function enchant_potion_apply() {
  local potion="${1:-$ENCHANT_POTION_BOTTLE}"
  local current=""
  local end=""
  local list=""

  # process any optional parameters
  while [[ "${1:0:1}" == "-" ]]
  do
    case "$1" in
      # starting module
      "-s")
        current="${2}"
        shift 2
        ;;
      # ending module
      "-e")
        end="${2}"
        shift 2
        ;;
      # stop processing optional parameters if passed '--'
      "--")
        shift
        break
        ;;
      *)
        ;;
    esac
  done

  # if the start module was given as a module name, get it's positional number
  if [[ -z "$current" ]]
  then
    current="0"
  elif [[ "$current" = [a-z]* ]]
  then
    current="$(grep -n $current $ENCHANT_DATA/modules | cut -d: -f1)"
  fi

  # if the end module wasn't explicitly specified, set it to the last possible
  # (non-error) module
  if [[ -z "$end" ]]
  then
    endmod="${#list}"
  # if the end module was specified as a module name, get it's positional number
  elif [[ "$end" = [a-z]* ]]
  then
    end="$(grep -n $end $ENCHANT_DATA/modules | cut -d: -f1)"
  fi


  # get the list of modules to operate on
  list=($(enchant_modules_list))

  # process each module's potion scripts from start module to end module
  for ((i=current; i < end; i++))
  do
    enchant_modules_potion "${list[i]}" "$potion"
  done

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##=back
##
##=head1 LICENSE
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#-------------------------------------------------------------------------------

# vim:ai:tw=80:tabstop=2:softtabstop=2:shiftwidth=2:expandtab
