#!/bin/bash
#-------------------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
##  Chroot construction and destruction functions for use in the installers.
##
##=head1 COPYRIGHT
##
##  Copyright 2010 by the Cauldron Team
##
##=head1 FUNCTIONS
##
##=over 4
##
#-------------------------------------------------------------------------------

# global variables for tracking chroot users
LIBCHROOT_PATHS=()
LIBCHROOT_USERS=()

# non-hardcoded /dev/null for output dumping
ENCHANT_NULL="${ENCHANT_NULL:-/dev/null}"
# non-hardcoded /dev/stdout for output dumping
ENCHANT_STDOUT="${ENCHANT_STDOUT:-/dev/stdout}"

# set LC_COLLATE to C so we don't get affected by the user's locale
# when grepping, sorting, etc.
export LC_COLLATE="C"

#-------------------------------------------------------------------------------
## @param target dir to chroot into
##
## Prepares a chroot environment and exports necessary variables. For every
## target dir to chroot into, there should be one
## [enchant_chroot_init ... enchant_chroot_done] pair.
##
#-------------------------------------------------------------------------------
function enchant_chroot_init() {
  local target="${1:-$ENCHANT_TARGET}"
  local num="${#LIBCHROOT_PATHS[@]}"
  local bind=""

  # ensure an existing absolute path
  target=$("${ENCHANT_CMD_READLINK[@]}" "$target") ||
    return $ERR_CHROOT_INVALID

  # if target is either null or not a valid directory, return an error
  [[ -d "$target" ]] || return $ERR_CHROOT_INVALID

  # if target matches the root directory, return an error
  [[ "$target" == "/" ]] && return $ERR_CHROOT_ISROOT

  # test if the target path is already loaded as a chroot -- if it is, just
  # increase the count, but if it isn't do the bind mounts and set up the
  # counts
  local already_loaded=0
  for p in "${LIBCHROOT_PATHS[@]}"
  do
    [[ "$p" == "$target" ]] && already_loaded=1
  done
  if [[ "$already_loaded" -eq 1 ]]
  then
    for ((path=0; path < num; path++))
    do
      if [[ "$target" == "${LIBCHROOT_PATHS[path]}" ]]
      then
        ((LIBCHROOT_USERS[path]++))
      fi
    done
  else
    # bind mount the dev tree
    for bind in dev dev/pts
    do
      "${ENCHANT_CMD_MOUNT_BIND[@]}" \
        "$ENCHANT_ISO_PATH/$bind" \
        "$target/$bind" ||
          return $ERR_CHROOT_INIT
    done
    # mount procfs
    "${ENCHANT_CMD_MOUNT[@]}" -t proc proc "$target/proc" ||
      return $ERR_CHROOT_INIT
    # mount sysfs
    "${ENCHANT_CMD_MOUNT[@]}" -t sysfs sys "$target/sys" ||
      return $ERR_CHROOT_INIT
    # mount runfs
    "${ENCHANT_CMD_MOUNT[@]}" -t tmpfs run "$target/run" ||
      return $ERR_CHROOT_INIT

    # add the target path to the list of chrooted paths
    LIBCHROOT_PATHS[num]="$target"
    # set the user count to 1
    LIBCHROOT_USERS[num]=1
  fi

  # test if the target path matches the currently defined chroot command target
  # path -- if it doesn't, we need to set the chroot command
  if [[ "$num" -eq 0 ||
    "$target" == "${ENCHANT_CHROOT[${num}-1]}" ]]
  then
    # everything went OK, so export the chroot definitions
    ENCHANT_CHROOT=( "${ENCHANT_CMD_CHROOT[@]}" "$target" )
  fi

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param chroot index (optional)
## @param target chroot paths (optional)
##
## Unmounts required mount points in the chroot and unsets the related CHROOT
## variables. If no target chroot is not provided, it will close ALL known
## chroot paths.
##
#-------------------------------------------------------------------------------
function enchant_chroot_close() {
  local index="$1"
  local chroot=
  local target=

  shift 1
  chroot=( "$@" )
  [[ -z "$chroot" ]] && chroot=( "${LIBCHROOT_PATHS[@]}" )

  for target in "${chroot[@]}"
  do
    local mounts=( $(grep -o "$target[^[:space:]]*" | sort -r) )
    [[ -n "$mounts" ]] || mounts=( sys run dev/pts dev proc )
    cauldron_verbose "closing chroot mounts: ${mounts[@]}"

    # unmount the chroot mount points
    for mnt in "${mounts[@]}"
    do
      if grep -q "$mnt" "$target/proc/mounts"
      then
        "${CAULDRON_CMD_UNMOUNT[@]}" "$target/$mnt" ||
          return $ERR_CHROOT_DONE
      fi
    done
  done

  # clear the chroot definitions
  if [[ -n "$index" ]]
  then
    unset LIBCHROOT_USERS[index]
    unset LIBCHROOT_PATHS[index]
  else
    unset LIBCHROOT_USERS
    unset LIBCHROOT_PATHS
  fi
  unset CAULDRON_CHROOT

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param target dir to chroot into (optional)
##
## Cleans up the chroot environment after it is no longer needed
##
#-------------------------------------------------------------------------------
function enchant_chroot_done() {
  local target="${1:-$ENCHANT_TARGET}"
  local index=""

  # ensure an existing absolute path
  target=$("${ENCHANT_CMD_READLINK[@]}" "$target") || return $ERR_TARGET

  # if target doesn't point to a valid directory, return an error
  [[ -d "$target" ]] || return $ERR_CHROOT_INVALID

  for ((index=0; index < "${#LIBCHROOT_PATHS[@]}"; index++))
  do
    if [[ "$target" == "${LIBCHROOT_PATHS[index]}" ]]
    then
      # remove one "lock" for each time cauldron_chroot_done is called until we
      # are down to the last one, and then do the actual cleanup of the chroot
      if [[ "${LIBCHROOT_USERS[index]}" -gt 1 ]]
      then
        LIBCHROOT_USERS[index]=$((LIBCHROOT_USERS[index]-1))
      else
        enchant_chroot_close "$index" "$target"
      fi
    fi
  done

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Forcefully cleans up all known chroot paths (only to be used before a forced
## exit from the main program due to a non-recoverable error condition)
##
#-------------------------------------------------------------------------------
function enchant_chroot_cleanup() {
  enchant_chroot_close
}

#-------------------------------------------------------------------------------
## @param -q [quiet -- don't output anything, just test] (optional)
## @param chroot path (optional)
##
## Determines the current chroot. If called with no parameters, it will return
## (echo) the path of the current chroot. If provided the chroot path parameter,
## it will test whether the provided path matches the current chroot, and will
## return an error if they don't match.
##
#-------------------------------------------------------------------------------
function enchant_chroot_current() {
  local num="${#LIBCHROOT_PATHS[*]}"
  local current=""
  local target=""
  local match=0
  local quiet=0

  # check if we should disable output
  if [[ "$1" == "-q" ]]
  then
    quiet=1
    shift
  fi
  target="$1"

  # use the correct index into the array (indexing starts from 0, but count of
  # elements starts from 1)
  [[ "$num" -gt 0 ]] && ((num--))
  current="${LIBCHROOT_PATHS[num]}"

  # if there is no current chroot, then return immediately (no sense testing if
  # anything matches the currently defined chroot when there is none)
  [[ -z "$current" ]] && return $ERR_CHROOT_CURRENT

  # make sure that the chroot is also present in LIBCHROOT_USERS
  # if it is not present in LIBCHROOT_USERS, then there is something wrong and
  # the chroot should probably be reloaded
  [[ "${LIBCHROOT_USERS[num]}" -ge 1 ]] || return $ERR_CHROOT_CURRENT

  if [[ -n "$target" ]]
  then
    # test if the target path doesn't match the currently defined chroot command
    # target path -- if it doesn't match, return an error
    [[ "$target" != "$current" ]] && return $ERR_CHROOT_CURRENT
  fi

  # output the currently loaded chroot
  [[ "$quiet" -ne 1 ]] && echo "$current"

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param -q (optional)
## @param -s (optional)
## @param command plus args to execute inside the chroot
##
## Executes the command given as the first parameter and any args that follow
## inside the chroot constructed by enchant_chroot_init. If the -q flag is
## passed, the command will be "quieted", meaning that messages from enchantment
## will be disabled. If the -s flag is passed, the command will run silently,
## where even the normal output of the chrooted command will be suppressed. The
## outupt follows the general pattern of configurable output, meaning that
## ENCHANT_NULL and ENCHANT_STDOUT will be used as the targets.
##
#-------------------------------------------------------------------------------
function enchant_chroot() {
  local stdout="$ENCHANT_STDOUT"

  case "${1#-}" in
    q)
      verbose="no"
      shift
      ;;
    s)
      verbose="no"
      stdout="$ENCHANT_NULL"
      shift
      ;;
  esac

  enchant_chroot_current -q || return $ERR_CHROOT_CURRENT

  enchant_verbose "${ENCHANT_CHROOT[@]} $@"

  PATH="/sbin:/bin:/usr/sbin:/usr/bin"
  "${ENCHANT_CHROOT[@]}" "$@" @> "$stdout" || return $ERR_CHROOT_EXEC

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#-------------------------------------------------------------------------------

# vim:ai:tw=80:tabstop=2:softtabstop=2:shiftwidth=2:expandtab
