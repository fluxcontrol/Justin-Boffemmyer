#!/bin/bash
#-------------------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
##  Common functions and variables for different installers
##
##=head1 DESCRIPTION
##
##  This file provides common function and variable definitions for
##  the different types of installers that can be included on an ISO.
##  This file is meant to be sourced by the different installers,
##  so this file should not be run directly. This file, as well as
##  the installer which sources this file, is meant to be called from
##  inside the ISO during the actual install onto the target system.
##
##=head1 COPYRIGHT
##
##  Copyright 2009 The Cauldron Team
##
##=head1 FUNCTIONS
##
##=over 4
##
#-------------------------------------------------------------------------------

# set LC_COLLATE to C so we don't get affected by the user's locale
# when grepping, sorting, etc.
export LC_COLLATE="C"

# shorthand and non-hardcoded /dev/null for output dumping
ENCHANT_NULL="${ENCHANT_NULL:-/dev/null}"

#-------------------------------------------------------------------------------
##
## Used only when checking initialization of the library and a fatal error
## occurs. Afterwards, functions from liberror are used instead.
##
#-------------------------------------------------------------------------------
function enchant_fatal_error() {
  echo "$1"
  exit 1
}

#-------------------------------------------------------------------------------
# liberror includes
#-------------------------------------------------------------------------------
. "$ENCHANT_COMMON/liberror" ||
  enchant_fatal_error "error: cannot load base library liberror"

# load enchantment error code and message defines
. "$ENCHANT_LIBS/errorcodes" ||
  enchant_fatal_error "error: cannot load enchantment error codes"

. "$ENCHANT_COMMON/libcolor" ||
  enchant_fatal_error "error: cannot load base library libcolor"

# test/set whether color output should be enabled
[[ "$ENCHANT_COLOR" != "yes" || "$(grep -q 'nocolor' /proc/cmdline)" ]] &&
  LIBCOLOR_NOCOLOR="yes"

# drop enchant_fatal_error if liberror was successfully loaded
unset enchant_fatal_error

#-------------------------------------------------------------------------------
## @param library name to load (no path, just basename)
##
## Loads the library given as the first argument. liberror_check_fatal is
## called to check if there was a problem loading the library, and if there was
## it will print a corresponding error message and then exit with the error
## $ERR_LOAD_LIBRARY.
##
#-------------------------------------------------------------------------------
function enchant_load_library() {
  local lib="$1"

  . "$ENCHANT_LIBS/$lib" 2>$ENCHANT_NULL
  liberror_check_fatal "cannot load library $lib"
}

#-------------------------------------------------------------------------------
## @param messages
##
## Prints informational messages to the console, but only if CAULDRON_VERBOSE
## is enabled.
##
#-------------------------------------------------------------------------------
function enchant_verbose() {
  [[ "$ENCHANT_VERBOSE" == "yes" ]] &&
    libcolor_msg info "$@"
}

#-------------------------------------------------------------------------------
## @param messages
##
## Prints error messages to the console, but only if CAULDRON_VERBOSE is
## enabled.
##
#-------------------------------------------------------------------------------
function enchant_verbose_error() {
  [[ "$ENCHANT_VERBOSE" == "yes" ]] &&
    libcolor_msg error "$@"
}

#-------------------------------------------------------------------------------
# enchant includes
#-------------------------------------------------------------------------------
enchant_load_library "lib.chroot"
enchant_load_library "lib.i18n"
enchant_load_library "lib.install"
enchant_load_library "lib.modules"
enchant_load_library "lib.potion"

#-------------------------------------------------------------------------------
# function definitions
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
##
## Sets the installer system to a sane, known initial state. Should only be
## called when first entering the installer system or ISO.
##
#-------------------------------------------------------------------------------
function enchant_prepare() {
  # this initializes the file which holds the current step
  "${ENCHANT_CMD_MKDIR[@]}" "$ENCHANT_TMP" || return $ERR_PREPARE
  echo 'init' > "$ENCHANT_STATUS" || return $ERR_PREPARE

  # the next lines are to init the history files
  enchant_potion_init
  liberror_check || return $ERR_PREPARE

  for file in bootloaders caches filesystems kernels mount_points sources
  do
    printf '' > "$ENCHANT_TMP/$file" || return $ERR_PREPARE
  done

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Cleans up the tmp directories and such forth
##
#-------------------------------------------------------------------------------
function enchant_cleanup() {
  "${ENCHANT_CMD_RM_RECURSE[@]}" "$ENCHANT_TMP" || return $ERR_CLEANUP

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param color state [yes or no] (optional)
##
## Wrapper function that handles setting the color state in libcolor. Possible
## values for the color state parameter are 'yes' or 'no' (without the quotes).
## If the parameter isn't supplied, then it defaults to whatever ENCHANT_COLOR
## is set to.
##
#-------------------------------------------------------------------------------
function enchant_color() {
  local color="${1:-$ENCHANT_COLOR}"

  [ "$1" = "no" ] && LIBCOLOR_NOCOLOR="yes"
}

#-------------------------------------------------------------------------------
## @param VARIABLE
##
## Returns (via echo) the current value of the specified VARIABLE. If VARIABLE
## is an array, it returns the full array as a single string.
##
#-------------------------------------------------------------------------------
function enchant_get_variable() {
  local var="$1"

  [[ -n "$var" ]] || return $ERR_TARGET

  var=$(declare -p "$var" 2> "$ENCHANT_NULL")
  liberror_check "$ERR_VARIABLE" "$var" || return $ERR_VARIABLE
  echo "${var##*$1=}"

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param history file (back or forward)
##
## Gets the current total number of history "back" entries
##
#-------------------------------------------------------------------------------
function enchant_history_total() {
  local histfile=

  case "$1" in
    back) histfile="$ENCHANT_BACK" ;;
    forward) histfile="$ENCHANT_FORWARD" ;;
    *) return $ERR_TARGET ;;
  esac

  "${ENCHANT_CMD_WC[@]}" -l < "$histfile" || return $ERR_FILE_ACCESS

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param history file (back or forward)
##
## Adds an entry to the given history file.
##
#-------------------------------------------------------------------------------
function enchant_history_push() {
  local histfile=

  case "$1" in
    back) histfile="$ENCHANT_BACK" ;;
    forward) histfile="$ENCHANT_FORWARD" ;;
    *) return $ERR_TARGET ;;
  esac

  enchant_get_current >> "$histfile" || return $ERR_FILE_ACCESS

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param history file (back or forward)
## @param entry index number (optional)
##
## Drops an entry from the given history file. By default it pops the most
## recent entry.
##
#-------------------------------------------------------------------------------
function enchant_history_pop() {
  local entry="${2:-$}"
  local histfile=

  case "$1" in
    back) histfile="$ENCHANT_BACK" ;;
    forward) histfile="$ENCHANT_FORWARD" ;;
    *) return $ERR_TARGET ;;
  esac

  "${ENCHANT_CMD_SEDFILE[@]}" "${entry}d" "$histfile" || return $ERR_FILE_ACCESS

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param history file (back or forward)
##
## Gets the current (most recent) history entry for the given history file.
##
#-------------------------------------------------------------------------------
function enchant_history_current() {
  local histfile=

  case "$1" in
    back) histfile="$ENCHANT_BACK" ;;
    forward) histfile="$ENCHANT_FORWARD" ;;
    *) return $ERR_TARGET ;;
  esac

  "${ENCHANT_CMD_TAIL[@]}" -n 1 "$histfile" || return $ERR_FILE_ACCESS

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Determines and returns the current module in the installation procedure.
##
#-------------------------------------------------------------------------------
function enchant_get_current() {
  [[ -z "$ENCHANT_STATUS" ]] && return $ERR_GET_CURRENT

  "${ENCHANT_CMD_CAT[@]}" "$ENCHANT_STATUS" || return $ERR_GET_CURRENT

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## @param step
##
## Sets the current module of the installer to be the step passed as an
## argument. Stores the current module to the back history before setting it to
## the new module.
##
#-------------------------------------------------------------------------------
function enchant_set_current() {
  local module="$1"

  # make sure the requested module exists in the set of possible modules
  if [[ " $(enchant_modules_list) " != *" $module "* ]]
  then
    return $ERR_SET_CURRENT
  fi

  enchant_modules_exit
  liberror_check || return $ERR_SET_CURRENT

  # if the max history size has been reached, then we drop the oldest item
  if [[ "$(enchant_history_total back)" -ge "$ENCHANT_POTION_BUFFER" ]]
  then
    enchant_history_pop back 1
    liberror_check || return $ERR_SET_CURRENT
  fi

  # copy the current module to the back history
  echo "$module" >> "$ENCHANT_BACK" || return $ERR_SET_CURRENT

  # check the installation state
  enchant_potion_update
  liberror_check || return $ERR_SET_CURRENT

  # set the current module
  echo "$module" > "$ENCHANT_STATUS" || return $ERR_SET_CURRENT

  enchant_modules_enter
  liberror_check || return $ERR_SET_CURRENT

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Determines and returns the next module in the installation procedure.
##
#-------------------------------------------------------------------------------
function enchant_get_next() {
  local modlist="$ENCHANT_ENCHANTER_MODULES"
  local mod=""

  mod=$(grep -m1 "^$(enchant_get_current):" "$modlist") || return $ERR_GET_NEXT
  mod="${mod#*:}"

  [[ -z "$mod" ]] && return $ERR_GET_NEXT

  echo "$mod"

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Sets the current module to the next module in the installation procedure.
##
#-------------------------------------------------------------------------------
function enchant_set_next() {
  local module

  # get next module
  module="$(enchant_get_next)"
  liberror_check || return $ERR_SET_NEXT

  # save new status
  enchant_set_current "$module"
  liberror_check || return $ERR_SET_NEXT

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Determines and returns the previous module in the installation procedure.
##
#-------------------------------------------------------------------------------
function enchant_get_prev() {
  local modlist="$ENCHANT_ENCHANTER_MODULES"
  local mod=""

  mod=$(grep -m1 ":$(enchant_get_current)$" "$modlist") || return $ERR_GET_PREV
  mod="${mod%%:*}"

  [[ -z "$mod" ]] && return $ERR_GET_PREV

  echo "$mod"

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Sets the current module to the previous module in the installation procedure.
##
#-------------------------------------------------------------------------------
function enchant_set_prev() {
  local module

  # get the current module
  module="$(enchant_get_prev)"
  liberror_check || return $ERR_SET_PREV

  enchant_set_current "$module"
  liberror_check || return $ERR_SET_PREV

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Moves the installer backward in its history (like the back button on a
## web browser).
##
## when you go back, you store/save the forward pages
##
#-------------------------------------------------------------------------------
function enchant_back() {
  local nback=
  local nforw=

  # if the back history is empty, then we can't go back
  nback="$(enchant_history_total back)" || return $ERR_HISTORY_BACK
  [[ "$nback" -eq 0 ]] && return $ERR_HISTORY_BACK

  # if the max forward history size has been reached
  nforw="$(enchant_history_total forward)" || return $ERR_HISTORY_FORWARD
  if [[ "$nforw" -ge "$ENCHANT_POTION_BUFFER" ]]
  then
    # then we drop the oldest item from the forward history
    enchant_history_pop forward 1
    liberror_check || return $ERR_HISTORY_BACK
  fi

  # copy the current status to the forward history, so we can go forward to
  # where we are after we jump back
  enchant_get_current >> "$ENCHANT_FORWARD"
  liberror_check || return $ERR_HISTORY_BACK

  # set the current step to be the one we are jumping to
  enchant_history_current back > "$ENCHANT_STATUS"
  liberror_check || return $ERR_HISTORY_BACK

  # remove the step we jumped to from the back history
  enchant_history_pop back
  liberror_check || return $ERR_HISTORY_BACK

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Moves the installer forward in its history (like the forward button on a
## web browser.
##
## when you go forward, you store/save the back pages
##
#-------------------------------------------------------------------------------
function enchant_forward() {
  local nback=
  local nforw=

  # if the forward history is empty, then we can't go forward
  nforw="$(enchant_history_total forward)" || return $ERR_HISTORY_FORWARD
  [[ "$nforw" -eq 0 ]] && return $ERR_HISTORY_FORWARD

  # if the max back history size has been reached
  nback="$(enchant_history_total back)" || return $ERR_HISTORY_BACK
  if [[ "$nback" -ge "$ENCHANT_POTION_BUFFER" ]]
  then
    # then we drop the oldest item from the back history
    enchant_history_pop back 1
    liberror_check || return $ERR_HISTORY_BACK
  fi

  # copy the current status to the back history, so we can go back to where we
  # are after we jump forward
  enchant_get_current >> "$ENCHANT_BACK"
  liberror_check || return $ERR_HISTORY_FORWARD

  # set the current step to be the one we are jumping to
  enchant_history_current forward > "$ENCHANT_STATUS"
  liberror_check || return $ERR_HISTORY_FORWARD

  # remove the step we jumped to from the forward history
  enchant_history_pop forward
  liberror_check || return $ERR_HISTORY_FORWARD

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##=back
##
##=head1 LICENSE
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#-------------------------------------------------------------------------------

# vim:ai:tw=80:tabstop=2:softtabstop=2:shiftwidth=2:expandtab
